Java1. Java ????a. What is a computer Program: i. A sequence of instruction: ????????????????????????ii. In a formal, limited language: ????iii. Java Languageb. Basic Program Developmenti. Compile error: ????ii. Execute error: ?????????????iii. Compiler:1. IntelliJ IDEA – Jet Brains (most recommend)2. Eclipse3. Visual Studio, xcode4. Text Editiv. IntelliJ IDEA:1. Java name convention: ??????????????????????????_?2. Src: stand for source???3. Java class convention: no number, no special character, ???????v. Example #1: print hello world1.	public class Example1 {    public static void main(String[] args) {        System.out.println("Hello World");    }}vi. Syntax & Semantics1. Form—?? and meaning—??????2. Structure and Function3. A drowning man will grasp at a straw4. ????c. General grammar of Javai. Beginning and End1. Containment paris: (), [], “”, ‘’ ??????????????? ?balance beginning and end?a. /* begins, */ ends---commentsb. //begins, end of line ends---comments2. End of statement symbolsa. A new statement begins after one endsb. The period ends in English.c. The semicolon ends in Java ;---????????????endd. “Head{Body}” pattern:i. Header section name of structure {Body contents inside two curly braces}3. Personalize expression(input):a. //print name(from input) ????????????????????b. Convert human age to dog age( 1 dog year equal to 7 human year)c. Add two inti. One issue: Can we keep more than one class in a single java file1. Yes, it can. However, there can only be one public class per .java file, as public classes must have the same name as the source file.2. IDEL ???????class??????java file????run?class2. Java ????a. Algorithms: i. recipes for telling computer how to do thingsii. Build out of things that the computer er already knows how to do (?????????????????recipes)iii. An program is an encoding of an algorithm in a language that the computer can understand and execute(?algorithm???????????????—program)b. Statementi. Program is a sequence of statementsii. Statements tell the compute what to do and when it executes themiii. Statements are executed sequentially(one after the other)1. Sequential flow of controlStart->Blablabal(statement)->blablabla->blablabla->endiv. Statements use values computed by the computerc.  Valuesi. There are different types of values1. Numbers(integers and reals)2. Characters(, ;)3. Strings (sequences of characters, text)4. Booleans(true or false)ii. Values can be literals(????) or expressions(??—java will automatically compute expression into literals)iii. Example1. iv. 1. All possible values number=2^length of encoding (size in the form) e.g,. 2?16??????—char2. Int has 2^31-1???????????+-?-1?0?3. Double???float??->?????double?https://www.imooc.com/article/6567?v. Literals1. Tell the computer “literally this value” :a. Number: 1 ,2 999, 3.1415,..b. String: “abc”c. Booleans: true and falsevi. Expressions1. Expression tell the computer how to computer a value2. Since an expression computes a value, there are different types expression3. You can operators to combine values into expression4. Expression ?value?operator??vii. Operators1. You use operators to combine values into expressiona. Arithmetic: +,-,*(multiply),/(divide), %(modulus??)b. String Connection +c. Comparison: ==, <=, >=, !=, <, > --do comparisond. Boolean: &&, ||, !(and, or, not)—return true or false2. “=” does not mean ‘EQUAL’. “=” assigns value??????????????d. Summaryi. There are different types of valuesii. Values can be literals or expressioniii. Operators combine values into expressioniv. The meaning of “=”? ??????????????1. ==????v. Variables are used to save values(good coding behavior, give variable a good name)e. Variables????i. Give names to values so we can remember them for later( this is really important)ii. The value is substituted for the name when the expression in evaluated?????????????????????1014??????????A?type?int	???????????int??13?????????????????1014????????13?Variable???????????????AddressValue1013null1014131015nulliii. In Java, variables must be declared(first with their type): int A=5iv. Assignment statement sets the value of a variable( “=”)v. Variables in expressions are replaces with their(current) value: A+B, A ?????3? B?????5? A+B=83. Java ????a. Straight-line program(sequential execture)i. Start----> Endb. If statementi. Else and else if and else1. Else if ?if condition?false???????else if condition?true?????ii. If(true / false condition) {Body of the method}iii. Condition true: execute the body/ Condition false: skip the bodyiv. Boolean1. Something that can be true or false2. Type:a. Literals: true and falseb. Variables: Boolean ac. Expressionsi. Comparison: ==, !=, >, >=, <, <=ii. Logical: &&, ||, !(and, or, not A)v. Flow control of if statement1. Condition?if?????? task1 ?if statement?body?vi. Control flow1. Straight line2. Simple Conditional(if)3. Branch Conditional(if-else)c. Iteration??—??i. ???????????ii. ???process1????start??????1. While loopa. While (bolden condition) {body}2. Exampleimport java.util.Scanner;public class Exercise_class3 {    public static void main(String[] args){        Intilaizationint value = 1; //when use the muptiple, value =1 is useful        int count = 0; //count = 0 we want to mutiple b times, count is from 0 we use <(we use the times ??0?1?2?3??4??        Scanner myScanner = new Scanner(System.in);        int a = myScanner.nextInt();        int b = myScanner.nextInt();        condition test while(count<b){            value = value*a;            updated count++;        }        System.out.println(value);    }} 	iii. Definite Iteration1. When we know in advance how many times the loop will cycle2. Usually tested against some pre-defined value3. Also know as counter controlled Iteration:???counter????????????????4. Three steps:a. Initialization, conditional test, update5. Definite iteration is so common that a special syntax has been invented for it6. For loop:a. For statement packages the three steps of definite iteration into a convenient easy to use syntactic packageb. For (Initialization; conditional test; update){body}c. ??for??for loopiv. Indefinite Iteration1. When we do not know in advance how many times the loop will cycle??????????? e.g., calculate the average pop quiz grade?2. Usually tested against some pre-defined signal value??????????????-1????????????3. Also known as  Sentinel Controlled Iteration ???pre-defined??????4. Do while Statement—not very usual usev. Nested control(???????)1. Conditionala. If/else, caseb. (New conditional-syntax sugar—usually use) casei. Consider the problem of having users select one of many choicesii. Decision Treeiii. Multiple choice1. The problem of having users select one of many choices is so common that special syntax has been developed for it---> Switch Statement2. 3. What will happen if there is no break:??break?????????????????break or default2. Iterativea. Consider the problem of generation of multiplication tableb. ???loop??end??????loop???? or??????function?????loop?????????loop?1?--->?loop?1-end?4. Java???????a. Write a program that uses a loop to print every third number starting with 1 and ending before reaching 100.i. We know loop times->defined iteration->need counterii. i++->i=i+1b. Write a program that reads numbers from the user until they enter the number 0, at which point it prints out the sum of the numbers they enteredi. We need to use1. ??2. ???????????if control?--??signal value to set where need to stop3. Scanner4. Sum5. ????????c. Write a program that reads words from the user until they enter the word “stop”, at which point it prints out all the words they entered on one line separated by spaces. Use String.equals to test whether two strings are the samei. ???????????????????????stringii. Print in one line: print iii. Remove empty space from a string beginning and ending=string.trim()iv. Remove empty space from only ending: out=out.replaceAll("\\s+$", "");1. Regex: \\s+$2. Replacement:””5. Java???more important?a. Objectsi. Defined by classesii. Contained state/fieldiii. Contain behavioriv. Methodsv. Constructorsvi. ToSring(special method)vii. Accessor and mutatorsb. ????c. Object-oriented programi. ii. Name+attributes+behavior=one people, through send messages to work togetherd. Methods(building blocks of program)i. E.g. main methodii. Public-???--???access???iii. Class + class nameiv. Static: 1. ????static?methods/????????static?method????static??????static????????non-static???2. Static????????????3. Non-static???call????????????????????????v. Void return type(send back one thing only)??vi. Main?????????main (??????main??????????)vii. String args[]? method ??? statement messageviii. Methods are mini programs that can be called by nameix. They can do their own thingx. We can send thing to themxi. Void: it can send things backe. Objects(defined by classes)i. How to represent the point?1. In file pount.java: Public class Point{Int x, y;} //fields or state????class??2. In file Myprogram.javaPublic class Myprogram {Public static void main(String [] args) {Point p1, p2; //from point.java(point class) like String S1, S2}}ii. How to create & represent a point?Public static void main(String [] args){Point p1, p2; //need p1 and p2 //declarep1 = new Point (); //constructor we need to defiend by our selves or importp1.x = -3; //set statep1.y = 2;System..out.println(p1.x+p1.y)}iii. Constructors(https://blog.csdn.net/qq_33642117/article/details/51909346)1. ????????.2. p1 = new Point (); //constructor & instantiation3. Multiple Constructorsa. We can define our own constructors to help with initialization4. ??????????????????????iv. References1. Declaration gives a reference to an object: ???reference2. Instantiation builds an objecta. Uses “new” operatorb. Invokes a constructorc. Need this as magic wordsv. Contain behavior&ToString(make things easy)—method1. ???return2. ???toString—magic key word3. ??????toString key words, ????????toString call??vi. Magic word1. This: class ??state2. New3. toStringvii. Accessors and Mutators(getter and setter method)********1. Two important methods for objectsa. Constructorb. toString2. Additional important methodsa. Accessors, “get”—?b. Mutators, “set”—?c. i. E.g. ??---private data????ii. Data?private????????3. Encapsulationa. Instance variable(fileds) are private to their classb. Getter(‘accessor’) method gets the value for use by other classes in expressioni. Read-onlyc. Setter(“mutator”) methods allow other classes to change the value6. Java(object-orientated programming ??-??????)a. Review Methods & Accessors & Mutatorsi. Methods 1. mini programs that can be called by name2. They can do their own thing3. We can send things into them4. They can send things back(return, type???header??specific)5. ??flow6. Important Methods for objectsa. Constructors: instantiation object specifiy ?????????????parameter?????methodb. toString??user??meaningful outputc. Accessors??????????access??????d. Mutators??????????change?????e. Helpersb. Helpersi. Public class BankAccount{Int accountNumber;Double balance;Public void debit(double amount){This.balance -= amount;} //this ??states variablePublic void credit(double amount) {This.balance += amount;}} c. Referencesd. Identity & Equality*****i. If (s1 == s2) { //same thing or not(compare little box)System.out.println(“== says equal”);} else {System.out.println(“==says not equal”);}If(s1.equals(s2)){ //compare the value from the little box re-directed valueSystem.out.println(“.equals says equal”)}else{System.out.println(“.equals says not equal”);}ii. == vs .equals()1. ???object/variable?a. Primitive type(int double float): put something into a small boxb. String???object: object??????? e.g. p1 point,????????????p1?????????p1???????????????????????????????2. == identity test: same thing or not3. Equals equality test: does the same value, s1 and s2 save on different address but have same value, so the little box will have different address to compare (we compare the little box on ==), if we use ==, it will shows s1 and s2 are different. But equals is to like open the box and going to address and compare the value re-directed by the address4. Equals for Object: String, array, INTEGERITY (int)e. Class Variables(states/fields of a class)i. ??class?????????e.g., x,y???point??????????ii. Instance Variables vs class variable(https://blog.csdn.net/qingtian12138/article/details/60872365)1. An object is an instance of a class2. Instance variables define the state of an object3. Each object has its own copy of instance variables(p1, p2???)iii. Class Variables:1. Different with instance variables: instance variables????instance?????variables??class variable???class????2. Associated with the class itself3. Share among all instances of the class defined as a “static” ???????????variable4. Consider the problem of counting the number of instances constructed f. Class Methodsi. Associated with the class itselfii. Share among all instance of the classiii. Defined as a ‘static’ methodiv. Use the class name to invoke(?class name?invoke ?????methods name)-- https://www.imooc.com/article/13423g. Composition(https://blog.csdn.net/weixin_43593330/article/details/105944778?utm_term=compositionjava&utm_medium=distribute.pc_aggpage_search_result.none-task-blog-2~all~sobaiduweb~default-0-105944778&spm=3001.4430)i. A person has a name(String) and age(Int)ii. A Driver’s licenace has a Person and a Expiration Dateiii. Has-a relationship between classesiv. A class can have references to instances of other classes7. Java ??(OOP)***a. Abstractioni. Collecting shared properties and methods into a new “parent ”classii. b. Inheritancei. A class inherits state(Instance variables) and behavior(methods) from its acestor classesii. Class B extends A: B??A????state?method1. ??shape?????color?filled?getArea?getPerimeterc. Abstract Classesi. Interface?????->?????????????????????????????????methods?????????ii. iii. ??call?cirle??getAreaiv. Abstract class are incompletev. Concrete classes(inheritance) extend abstract classes—????????parent???abstract classes methods1. Inherit their functionality2. Complete their definitionvi. You cannot construct objects of abstract classes??????????constructvii. super() is to invoke parents class constructors(https://blog.csdn.net/cunchi4221/article/details/107474551)1. ???????????????????????????????2. ????????????????????????? ???????????????java????????????????viii. Abstract class code:1. abstract class class_name2. cuz not defined method, we need a public abstract return_type_method method_named. Polymorphism(???method????class???????????????call?)i. The same method in different classes can do different thingsii. The same method invoked on instances of different classes can behave differentlye. Summaryi. ii. iii. iv. ???method????class????????f. Object-oriented Designi. Abstraction: common state & Behaviorii. Inheritance: extending a parent class—????1. ???extends concrete class?????????????????????iii. Polymorphism: multiple implementations of methods in different classes8. Java exercise(OOP)9. Java basic class (Arrays)a. Arraysi. Create an employee systems, usually use the Employee e1 = new Employee(“A”, “B”), Employee e2= new Employee(..), but if you have many employeesii. Arrays are containers of multiple items = fruit basketiii. Arrays are ordered sequences of values (index is order)Java index must start with 0!!!!Different employee in different basketb. Declaring arraysi. ElementType [] arrayname;ii. ??array?????????????????define??object????type???????????iii. Int [] scores;/ String [] args; Employee [] myEmployees;c. Creating arraysi. Like Objects, array must be constructed(kw: new)ii. Int [] scores = new int[10—length]--constructediii. String [] args = new String[15];iv. Employee [] myEmployees = new Employee[5];d. Initializing arraysi. Employee [] myEmployeemyEmployee = new Employee[10] createmyEmployee[0] = new Employee(“A”, “B”)ii. Another way: int [] scores{7,21,34,56}-->length is 4 and 7 have index 0e. Using Arraysi. Int [index] scores = new int[5]ii. myEmployee[0]=new Employee(“A”, “B”)--->PUT EMPOYEE INTO THE ARRAY EMPOYEE WITH INDEX 0iii. I=0 I<SIZE(array legth) Or I=1 I<=SIZE(---make sure go around all arrayiv. Enhanced for loop:1. For (int square: squares){} -->get all element(int square) from array(squares) from index 0 to end of it within orderf. Array boundsi. Over the array length->ArrayIndexOutOfBoundsExceptiong. Array lengthi. How to get array lengthii. Arrays.lengthh. Array instance varsi. Using constructor to create array which make array to become the instance variable of classi. Array parametersi. Array can be treat as parameter and return(output)j. Arrays of objectsi. Arrays of primitives are stored in place ?????ii. Array of objects store reference????????10. Java basic(Error Handling & intro to exceptions)a. Error Handlingi. Some errors can be indicated with a special return valueii. For some errors there is no reasonable “error” valueiii. Errors may be detected at one point but need to be handled elsewhereb. Exceptionsi. Defined Exception class cannot be publicii. ??A problem that occurs when a program executesiii. A problem that requires immediate attention to resolveiv. Program cannot continue without addressing the problemc. Fatal Exceptionsi. ????ii. Problems so server that the program almost certainly cannot continueiii. Java calls these Errors1. OutOfMemoryErrord. Non-Fatal Exceptionsi. Problems that require immediate attentionii. Program cannot continue without resolving the problemiii. Problem is usually resolvablee. Throwing Exceptionsi. Exceptions represented as classes under1. Java.lang.Exceptionii. Exception is thrown when problem is detectedf. Catching Exceptionsi. Exceptions are caught use try-catch(statement)ii. Execution stack is unwound to find handler1. ????????handle??error???2. ?????????maing. Stack unwindingi. Method terminates, all local vars gone1. Exception thrown but not caught in a scope2. Control returns to caller to look for catch3. Repeat until caught or main terminatesh. Uncaught Exceptioni. All exception that has no matching handler (catch clasue) in the call stackii. Causes death of program with error messagei. Checked and unchecked exceptionsi. Unchecked exceptions: compiler does not help ensure exceptions are handled1. Subclasses of RuntimeExceptionii. Checked exceptions: must be caught or declared1. Methods must declare any checked exceptions that they may throwj. Definition and Declarationi. Can define your own classes of exceptionsii. Inherit from exception (or a subclass) extendsk. Assertionsi. Evaluate a Boolean condition and throw and assertionError if falseii. Useful for debugging/testingiii. Does not replace careful codingiv. Not tested/thrown in production code11. Java basic (Array List, Stack Queue, Tree, Linked List, Hash Table)a. See Ipad12. Java basic(Generics)—usually usea. Generic: characteristic of or relating to a class or group of things; not specific-??b. Generics(in Java): i. For a class that uses instances of another classii. A mechanism that allows you to specify the state and behavior of the class without needing to know(exactly) what the other class is(??????instances???????type???????)c. Generic Collectionsi. Allow you to specify the type of the elements in the collectionii. Allows the java compiler to check that you’re using it properlyiii. Eliminates type casts and run-time exceptions(crashes)iv. ???array list<specify type>---type??????java??array list???????type(limit the type you can put, you do not need to casts type0v. Public interface List<E?Generic type parameter?> { void add(E?method parameter? x???????????????????); Iterator<E>?related generic type? iterator();} **?????E???specific type??????????type???????function?method???Public interface Iterator<E> {E next() ?method return values?;Boolean hasNext();}d. Listi. Java.util.List interfaceii. ArrayList or LinkedList implementationiii. Generic: specify element types as part of collection typee. Non-generic collections—??????????????i. Public interface List {Void add(Object?any thing can be use—put on here? x);Iterator iterator();}Public interface Iterator{Object next();Boolean hasNext();}f. Generic Types (classes and interfaces)i. Take one or more type parameters(e.g., key and value)ii. Used for1. Variable types(instance variables, local variables, method parameters)2. Method return types3. Other generic type declarationsiii. Conventionally named with single capital letterg. Manufacture(???T or E to place holder)i. Has a catalog of the things it sellsii. Has a list or set of orders for(some of) those thingsiii. Has an inventory recording how many of each of the things they have in stockh. Adavanced Genericsi. Wildcard types and bounded wildcards?????ii. Generic Methods(????method???class)1. Distinct from methods of generic classes2. Erasurea. Deep magic