class Solution {
    public List<String> wordBreak(String s, List<String> wordDict) {
        List<String> res = new LinkedList<>();
        if(s == null || s.length() == 0 || wordDict == null) return res;
        Set<String> set = new HashSet<>();
        for(String temp : wordDict){
            set.add(temp);
        }
        boolean[] memo = new boolean[s.length()];
        for(int i = 0; i < memo.length; i++){
            memo[i] = true;
        }
        dfs(s, 0, new StringBuilder(), res, set, memo);
        return res;

    }
    private boolean dfs(String s, int index, StringBuilder sb, List<String> res, Set<String> set, boolean[] memo){
        if(index == s.length()){
            sb.deleteCharAt(sb.length() - 1);
            res.add(sb.toString());
            return true;
        }
        if(!memo[index]) return false;
        boolean flag = false;
        int size = sb.length();
        for(int i = index + 1; i <= s.length(); i++){
            String ss = s.substring(index, i);
            if(set.contains(ss)){
                sb.append(ss);
                sb.append(' ');
                if(dfs(s, i, sb, res, set, memo)){
                    flag = true;
                }
                sb.setLength(size);
            }
        }
        return memo[index] = flag;

    }
}