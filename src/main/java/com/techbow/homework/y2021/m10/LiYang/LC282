class Solution {
    public List<String> addOperators(String num, int target) {
        List<String> list = new LinkedList<>();
        if(num == null || num.length() == 0){
            return list;
        }
        Set<String> set = new HashSet<>();
        dfs(num, target, 0, new StringBuilder(), list, set);
        return list;
    }
    private void dfs(String num, long target, int index, StringBuilder sb, List<String> res, Set<String> set){
        if(index == num.length()){
            sb.deleteCharAt(sb.length() - 1);
            String path = sb.toString();
            if(set.contains(path)) return;

            if(evaluate(path) == target){
                res.add(path);
                set.add(path);
            }
            return;
        }
        int size = sb.length();
        for(int i = index + 1; i <= num.length(); i++){

            String ss= num.substring(index, i);
            if(ss.length() > 1 && ss.charAt(0) == '0') break;

            //case ii, *
            sb.append(ss);
            sb.append('*');
            dfs(num, target, i, sb, res, set);
            sb.setLength(size);
              //case ii, -
            sb.append(ss);
            sb.append('-');
            dfs(num, target, i, sb, res, set);
            sb.setLength(size);

            //case i, +
            sb.append(ss);
            sb.append('+');
            dfs(num, target, i, sb, res,set);
            sb.setLength(size);
        }
    }
    private long evaluate(String s){
        char sign = '+';
        long res = 0;
        long num = 0;
        long lastV = 0;
        for(int i =0; i <= s.length(); i++){

                char temp = i < s.length() ? s.charAt(i) : '+';

            if(Character.isDigit(temp)){
                num = num * 10 + (temp - '0');
            } else {
                if(sign == '+'){
                    lastV = res;
                    res = res + num;

                } else if(sign =='-'){
                    lastV = res;
                    res = res - num;
                } else {
                    res = (res - lastV) * num + lastV;

                }
                num = 0;

                sign = temp;
                }
        }
        return res;

    }
}