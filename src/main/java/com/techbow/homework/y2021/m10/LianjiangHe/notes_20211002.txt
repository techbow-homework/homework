//written by Lianjiang He at 2021/10/02
//算法入门2
Big(O) O(1)
是因为赋值操作只用头地址+n*size of int
O(1) 	pro:random access
	Con:continuous address -- low usage rate; have to pre-known its size; insert/delete---O(n)
Java 申明数组的时候不能指定其大小，但是创建数组时，指定大小或者初始化数组2选1
Char[] =initial '\0'
Matrix O(1)
二维数组的遍历?
Arraylist(可变长度array)
Class Arraylist<T> {}
Arraylist<Integer> list = new Arraylist<> ();

Hw:implement a Arraylist
Class MyArrayList{
	private int[] vals;
	private int capacity=256;
	public MyArraylist(){
	this.vals = new int[this.capacity];
	}
Public int size{}
Public void add(int val){}
Public int get(int index){}
Public void set(int index,int val){}
Public void insert(int index,int val){} //set val to index i, then shift
Public void delete(int index){} //delete item with index i
Public void print(){} //print whole arraylist contents

}
LinkedList uncontinuous
Class listnode
Singly-linked list
Reverse linked list(Dummy node)
Double linked list
For each time complexity O(1)

HW:dummy head <-(1)-> dummy tail
	add:tail.prev addMe tail
Public class LinkedList {
Private listNode head,tail;
Private int cur size ;
Public LinkedList(){
	this.curSize =0;
	this.head = new ListNode(-1);
	this.tail = new ListNode(-1);
	this.head.next = this. Tail;
	this.tail.prev = this.head;
}
Public int size(){
	return this.curSize();
}
Public void add(int val){
//tail.prev addMe tail
ListNode prev = tail.prev;
Prev.next = addMe;
AddMe.prev =prev;
//addMe tail
AddMe.next = this.tail;
This curSize++;
}
Public int get(int index){
If (index<0||index>= this curSize){
Throw new RuntimeException("Out of Boundary")
}
ListNode cur = this.head;
While (index-->0){
Cur = cur.next;
}
Return cur.val;
}
}

Public void add(int index,int val){}//index -1 >addMe->index
Public void remove(int index){}// delete element with index "index"
