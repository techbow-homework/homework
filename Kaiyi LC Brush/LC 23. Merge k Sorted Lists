/**
 * Definition for singly-linked list.
 * public class ListNode {
 *     int val;
 *     ListNode next;
 *     ListNode() {}
 *     ListNode(int val) { this.val = val; }
 *     ListNode(int val, ListNode next) { this.val = val; this.next = next; }
 * }
 */
class Solution {//time complexity O(NlogK), faster than merge 1 by 1 since each node is scanned logK times, while 1 by 1 is about N times.
    public ListNode mergeKLists(ListNode[] lists) {
        return mergeListNode(lists, 0, lists.length - 1);
    }

    public ListNode mergeListNode(ListNode[] lists, int l, int r){
        if(l > r) return null;
        if(l == r) return lists[l];
        if(l+1 == r) return mergeTwoList(lists[l], lists[r]);
        int m = l + (r - l)/2;// prevent overflow
        ListNode l1 = mergeListNode(lists ,l, m);//use recursion to merge lists in a binary fashion
        ListNode l2 = mergeListNode(lists, m + 1, r);
        return mergeTwoList(l1, l2);
    }

    public ListNode mergeTwoList(ListNode l1, ListNode l2){//O(N) time complexity since each node is visited once
        if(l1 == null || l2 == null) return (l1 == null)? l2:l1;
        if(l1.val > l2.val){
            l2.next = mergeTwoList(l1, l2.next);
            return l2;
        }else{
            l1.next = mergeTwoList(l1.next, l2);
            return l1;
        }

    }
}
