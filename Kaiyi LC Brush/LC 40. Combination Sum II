class Solution {
    private List<List<Integer>> res;
    private int[] candidates;
    private int target;
    public List<List<Integer>> combinationSum2(int[] candidates, int target) {
        res = new ArrayList<>();
        //corner case
        if(target == 0|| candidates == null || candidates.length == 0) return res;
        this.target = target;
        this.candidates = candidates;
        Arrays.sort(this.candidates);
        List<Integer> subRes = new ArrayList<Integer>();
        DFS(subRes, 0 , 0);
        return res;
    }

    public void DFS(List<Integer> subRes, int index, int subSum){
        if(subSum == target){
            res.add(new ArrayList<>(subRes));
            return;
        }
        if(subSum > target) return;

        for(int i = index; i < candidates.length; i++){
            subRes.add(candidates[i]);
            DFS(subRes, i + 1 , subSum + candidates[i]);
            subRes.remove(subRes.size() - 1);
            while(i + 1 < candidates.length && candidates[i] == candidates[i + 1]) i++;//skip the same element cause it will produce duplicates.
        }
    }
}