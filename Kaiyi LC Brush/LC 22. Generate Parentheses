class Solution {
    private List<String> res;
    public List<String> generateParenthesis(int n) {//similar to generate number , but need to keep left and right parenthesis number and make sure left is always smaller or equal to right
        //corner case
        res = new ArrayList<>();
        if(n == 0) return res;
        StringBuilder sb = new StringBuilder();
        DFS(n, n, sb);
        return res;
    }

    public void DFS(int left, int right, StringBuilder sb){
        if(left == 0 && right == 0){
            res.add(sb.toString());
            return;
        }
        if(left > 0){
            sb.append("(");
            DFS(left - 1, right, sb);
            sb.deleteCharAt(sb.length() - 1);
        }
        if(right > 0 && right > left){
            sb.append(")");
            DFS(left, right - 1, sb);
            sb.deleteCharAt(sb.length() - 1);
        }
    }
}