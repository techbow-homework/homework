/**
 * Definition for a binary tree node.
 * public class TreeNode {
 *     int val;
 *     TreeNode left;
 *     TreeNode right;
 *     TreeNode() {}
 *     TreeNode(int val) { this.val = val; }
 *     TreeNode(int val, TreeNode left, TreeNode right) {
 *         this.val = val;
 *         this.left = left;
 *         this.right = right;
 *     }
 * }
 */
class Solution {
    public int countNodes(TreeNode root) {//primitive ,先recursion后办事，same for all BT
        //use binary search to find the place
        //corner case
        if(root == null) return 0;
        int level = 0;
        TreeNode curr = root;
        while(curr.left != null){//watch out here! It is curr.left != null here
            curr = curr.left;
            level++;
        }
        int nodeNum = (int)Math.pow(2, level) - 1, right = nodeNum, left = 0;//need to convert double to int, right is 0 based last level index
        //binary search
        while(left <= right){//break condition: left > right
            int mid = left + (right - left) / 2;
            if(exist(root, level, mid)){
                left = mid + 1;
            }else{
                right = mid - 1;
            }
        }
        return (int)Math.pow(2,level) - 1 + left;
    }

    public boolean exist(TreeNode root, int level, int index){
        TreeNode curr = root;
        int left = 0, right = (int)Math.pow(2, level) - 1;
        for(int i = 0; i < level; i++){
            int mid = left + (right - left)/2;
            if(mid >= index){
                curr = curr.left;
                right = mid;
            }else{//mid < index go right
                curr = curr.right;
                left = mid + 1;
            }
        }
        return curr != null;
    }
}