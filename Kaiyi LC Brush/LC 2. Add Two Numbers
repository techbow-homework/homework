/**
 * Definition for singly-linked list.
 * public class ListNode {
 *     int val;
 *     ListNode next;
 *     ListNode() {}
 *     ListNode(int val) { this.val = val; }
 *     ListNode(int val, ListNode next) { this.val = val; this.next = next; }
 * }
 */
class Solution {
    public ListNode addTwoNumbers(ListNode l1, ListNode l2) {
        //Coner case
        if(l1 == null || l2 == null){
            return l1 == null ? l2: l1;
        }
        int carry = 0;
        ListNode dummy = new ListNode(), curr = dummy;
        while(l1 != null || l2 != null){
            int x = (l1 == null)? 0: l1.val;
            int y = (l2 == null)? 0: l2.val;
            int sum = x + y + carry;
            curr.next = new ListNode(sum % 10);
            carry = sum / 10;
            l1 = (l1 == null) ? null : l1.next;
            l2 = (l2 == null) ? null : l2.next;
            curr = curr.next;
        }
        if(carry == 1) curr.next = new ListNode(1);

        return dummy.next;

    }

   /* public ListNode reverse(ListNode head){
        //corner case
        if(head == null || head.next == null) return head;

        ListNode prev = null;
        while(head != null){
            ListNode next = head.next;
            head.next = prev;
            prev = head;
            head = next;
        }
        return prev;
    }*/
}