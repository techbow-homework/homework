class Solution {
    private List<List<Integer>> res;
    private int k, n;
    public List<List<Integer>> combinationSum3(int k, int n) {
        res = new ArrayList<>();
        //corner case
        if(k == 0) return res;
        this.k = k;
        this.n = n;
        List<Integer> subRes = new ArrayList<>();
        DFS(subRes, 0, 1, 0);
        return res;
    }

    public void DFS(List<Integer> subRes, int subSum, int index, int count){
        if(subSum == n && count == k){
            res.add(new ArrayList<>(subRes));
            return;
        }
        if(subSum > n) return;
        for(int i = index; i <=9; i++){
            subRes.add(i);
            DFS(subRes, subSum + i, i + 1, count + 1);
            subRes.remove(subRes.size() - 1);
        }
    }
}