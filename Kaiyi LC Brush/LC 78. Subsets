class Solution {//backtracking, time complexity O(NÃ—2^N) to generate subset and copy to res, space O(N)
    private List<List<Integer>> res;
    private int n, k;
    public List<List<Integer>> subsets(int[] nums) {
        res = new ArrayList<>();
        n = nums.length;
        for(k = 0; k < n+1; k++){// this part count how many integers in the subset
            backtracking(new ArrayList<Integer>(), nums, 0);
        }
        return res;
    }

    public void backtracking(ArrayList<Integer> sublist, int[] nums, int first){
        if(sublist.size() == k) {
            res.add(new ArrayList(sublist));
            return;
        }
        for(int i = first ; i < n ; i++){
            sublist.add(nums[i]);
            backtracking(sublist, nums, i+1);
            sublist.remove(sublist.size() - 1);//backtracking to add all res
        }
    }
}