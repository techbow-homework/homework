/**
 * Definition for a binary tree node.
 * public class TreeNode {
 *     int val;
 *     TreeNode left;
 *     TreeNode right;
 *     TreeNode() {}
 *     TreeNode(int val) { this.val = val; }
 *     TreeNode(int val, TreeNode left, TreeNode right) {
 *         this.val = val;
 *         this.left = left;
 *         this.right = right;
 *     }
 * }
 */
class Solution {
    public boolean isCompleteTree(TreeNode root) {//level order traversal
        //base case
        if(root == null) return true;
        Queue<TreeNode> q = new LinkedList<TreeNode>();
        q.offer(root);
        boolean hasNull = false;
        while(!q.isEmpty()){
            int size = q.size();
            for(int i = 0 ; i < size; i++){
                TreeNode curr = q.poll();
                if(curr.left != null || curr.right != null){
                    if(hasNull)return false;
                    if(curr.left != null) q.offer(curr.left);
                    else hasNull = true;

                    if(curr.right != null){
                        if(hasNull) return false;
                        q.offer(curr.right);
                    }else hasNull = true;
                }else hasNull = true;//missed this step previously
            }

        }
        return true;

    }
}