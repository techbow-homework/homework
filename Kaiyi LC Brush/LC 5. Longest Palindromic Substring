class Solution {
    /*public String longestPalindrome(String s) {
        int currmax = 1;
        String res =""+ s.charAt(0);
        for(int i = 0; i < s.length(); i++){
            for(int j = i + currmax; j < s.length(); j++){
                //if(j - i + 1 < currmax) continue;
                if(checkPalindromic(s.substring(i, j + 1))){
                    currmax  = j - i + 1;
                    res = s.substring(i, j + 1);
                }
            }
        }
        return res;

    }
    public boolean checkPalindromic(String ss){
        int i =0;
        int j = ss.length() -1;
        while(i < j){
            if(ss.charAt(i++) != ss.charAt(j--)) return false;
        }
        return true;
    }*/
     public String longestPalindrome(String s) {
         int l = s.length();
         String res = null ;

         boolean[][] dp = new boolean[l][l];

         for(int i = l - 1; i >= 0; i--){//must from tail to start for dp[i+1][j-1] later
             for(int j = i; j < l ; j++){
                 dp[i][j] = s.charAt(i) == s.charAt(j) &&(j - i < 3 ||dp[i+1][j-1]);

                 if(dp[i][j] &&(res == null || j -i + 1 > res.length())){
                     res = s.substring(i, j + 1);
                 }
             }
         }
         return res;
     }
}
