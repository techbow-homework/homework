/*class Solution {
    public int strStr(String haystack, String needle) {//use two pointers to point at charAt
        //corner case
        if(needle.equals("")) return 0;
        if(haystack.equals("")) return -1;
        int hlength = haystack.length();
        int nlength = needle.length();
        for(int i = 0; i <= hlength - nlength; i++){
            if(haystack.substring(i, i + nlength).equals(needle)){
                return i;
            }
        }
        return -1;
    }
}*/
class Solution {
    public int strStr(String haystack, String needle) {//KMP method, O(M + N)
        //corner case
        if(haystack == null || needle == null || needle.length() > haystack.length()) return -1;

        int[] pre = preprocess(needle);
        int i = 0, j = 0;
        while(i < haystack.length() && j < needle.length()){
            if(haystack.charAt(i) == needle.charAt(j)){
                i++; j++;
            }else if(j > 0){
                j = pre[j - 1];
            }else{
                i++;
            }
        }
        return j == needle.length() ? i - j: -1;
    }

    public int[] preprocess(String needle){//idea here is to find sufix == prefix in the previous string of a unmatched char
        int[] res = new int[needle.length()];
        int i = 1, j = 0;//i start from 1 here , basically still compare sub string but comparing substring inside the string to itself.
        while(i < needle.length()){
            if(needle.charAt(i) == needle.charAt(j)){
                res[i] = j + 1;
                i++; j++;
            }else if(j > 0){
                j = res[j - 1];
            }else{
                res[i] = 0;
                i++;
            }
        }
        return res;
    }

}