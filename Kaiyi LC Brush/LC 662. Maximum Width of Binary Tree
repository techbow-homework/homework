/**
 * Definition for a binary tree node.
 * public class TreeNode {
 *     int val;
 *     TreeNode left;
 *     TreeNode right;
 *     TreeNode() {}
 *     TreeNode(int val) { this.val = val; }
 *     TreeNode(int val, TreeNode left, TreeNode right) {
 *         this.val = val;
 *         this.left = left;
 *         this.right = right;
 *     }
 * }
 */
class Solution {
    public class Element{
        TreeNode node;
        int pos;
        public Element(TreeNode node, int pos){
            this.node = node;
            this.pos = pos;
        }
    }

    public int widthOfBinaryTree(TreeNode root) {//USE BFS
        //corner case
        if(root == null) return 0;
        //declare variable
        List<int[]> widths = new ArrayList<>();//int []{left , right}
        int level = 0;
        int res = 0;
        Queue<Element> q = new LinkedList<>();
        //BFS
        q.offer(new Element(root, 0));
        while(!q.isEmpty()){
            Element head = q.peek();//this prevents the case where we have out of bounds for the node position by coincident
            int size = q.size();
            for(int i = 0; i < size; i++){
                Element curr = q.poll();
                TreeNode currNode = curr.node;
                int currPos = curr.pos;
                if(currNode.left != null){
                    q.offer(new Element(currNode.left,  currPos * 2));
                }
                if(currNode.right != null){
                    q.offer(new Element(currNode.right, currPos * 2 + 1));
                }
                res = Math.max(res, currPos - head.pos + 1);
            }
            level++;
        }

        return res;
    }

}
/*class Solution {
    public int widthOfBinaryTree(TreeNode root) {
        if (root == null)
            return 0;

        // queue of elements [(node, col_index)]
        LinkedList<Pair<TreeNode, Integer>> queue = new LinkedList<>();
        Integer maxWidth = 0;

        queue.addLast(new Pair<>(root, 0));
        while (queue.size() > 0) {
            Pair<TreeNode, Integer> head = queue.getFirst();

            // iterate through the current level
            Integer currLevelSize = queue.size();
            Pair<TreeNode, Integer> elem = null;
            for (int i = 0; i < currLevelSize; ++i) {
                elem = queue.removeFirst();
                TreeNode node = elem.getKey();
                if (node.left != null)
                    queue.addLast(new Pair<>(node.left, 2 * elem.getValue()));
                if (node.right != null)
                    queue.addLast(new Pair<>(node.right, 2 * elem.getValue() + 1));
            }

            // calculate the length of the current level,
            //   by comparing the first and last col_index.
            maxWidth = Math.max(maxWidth, elem.getValue() - head.getValue() + 1);
        }

        return maxWidth;
    }
}*/